/* ----------------------------------------------------------------------- *//**

@file complete_linkage.sql_in

@brief Implementation of complete-linkage agglomerative hierarchical clustering.

@author Written by Jin Yu
@date 22 September 2014

 *//* ----------------------------------------------------------------------- */


/**
@addtogroup grp_complete_linkage

@brief Complete-linkage agglomerative hierarchical clustering.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#complete_linkage_syntax">Syntax</a>
<li class="level1"><a href="#complete_linkage_usage">Usage</a>
<li class="level1"><a href="#complete_linkage_example">Example</a>
</ul>
</div>

@about
This function implements the commonly used complete-linkage hierarchical clustering algorithm. It constructs a hierarchical clustering tree from bottom up by merging closest clusters. Complete-linkage clustering defines the distance between two clusters as the distance between the farthest pair of data points in the two clusters (https://en.wikipedia.org/wiki/Complete-linkage_clustering). Given a hierarchical clustering tree, one can cut the tree at a certain height to obtain flat clusters of data points (cf. \ref grp_cut_hclust_tree).

@anchor complete_linkage_syntax
@par Syntax
<pre class="syntax">
FUNCTION complete_linkage(dist_tab TEXT, id1 TEXT, id2 TEXT, dist TEXT, output TEXT, stop_criterion TEXT, iter NUMERIC) 
RETURNS VOID;
</pre>

@param dist_tab Table that contains pairwise distances of data. It is sufficient to provide only the lower or upper triangular part of the distance matrix.
@param id1 ID column of data point 1 in \a dist_tab.
@param id2 ID column of data point 2 in \a dist_tab.
@param dist Column of pairwise distances. (Missing rows are taken to have 0 distance.)
@param output Name of the result table, containing the constructed hierarchical clustering tree.
@param stop_criterion Stopping criterion used to stop the clustering. Use 'max_iter' to stop the clustering after 
a max number of iterations (NULL to build the entire clustering tree). Use 'threshold' to stop the clustering after
the max distance between clusters reaches a threshold value. 
@param iter Value corresponding to the stop_criterion

@sa grp_cut_hclust_tree (for cutting the clustering tree to form flat clusters).


@anchor complete_linkage_usage
@usage

This function operates on pairwise distances between data points. They are expected to be provided in a table of the following structure:
\n
\code
TABLE/VIEW input_table
(
    ...
    id1 INT, -- ID of point 1
    id2 INT, -- ID of point 2
    dist FLOAT8, -- distance between points 1 and 2
    ...
);
\endcode

The distance measure is assumed to be non-negative and symmetric (but not necessarily a proper distance metric). Let \f$A\f$ denote the distance matrix with \f$A_{ij}\f$ being the distance between data points \f$i\f$ and \f$j\f$. It is sufficient to only provide non-zero entries in the lower or upper triangular part of \f$A\f$. The obtained hierarchical clustering tree is saved in a user-specified output table. The output table is to be used as input to the cut_hclust_tree_complete() function to produce flat clusters.

The output is a table that specifies the constructed hierarchical clustering
tree. It contains cluster IDs, members of clusters, IDs of immediate children
clusters, and heights of clusters. This table is expected to be used as input
to \ref grp_cut_hclust_tree to form flat clusters.

The output currently includes also a column called "active". This is only
for internal use inside the \a complete_linkage function.

@anchor complete_linkage_example
@examp

-# Create a test pairwise distance matrix
\code
CREATE TEMP TABLE complete_linkage_test_dist (id1 INT, id2 INT, dist FLOAT) DISTRIBUTED RANDOMLY;

INSERT INTO complete_linkage_test_dist VALUES
(1,2,0), 
(1,3,1),
(1,4,5),
(2,3,2),
(2,4,4),
(3,4,3);
\endcode
\n
-# Build a hierarchical clustering tree
\code
SELECT pdltools.complete_linkage('complete_linkage_test_dist','id1','id2','dist','complete_linkage_test_output',NULL);
\endcode
\n
-# Cut the clustering tree at a certain height  (2 in the example) to obtain flat clusters (see \ref grp_cut_hclust_tree for the usage of the cut_hclust_tree() function)
\code
SELECT pdltools.cut_hclust_tree('complete_linkage_test_dist','id1','id2','dist','complete_linkage_test_output',2,'complete_linkage_test_cluster');
\endcode
The \a cluster_id column in the output table \a complete_linkage_test_cluster indicates data assignment.
\code
SELECT * FROM complete_linkage_test_cluster;

 cluster_id | member  | height | exemplar 
------------+---------+--------+----------
          2 | {3,1,2} |      2 |        1
          1 | {4}     |      0 |        4
(2 rows)

\endcode
 */

 
/**
@addtogroup grp_cut_hclust_tree

@brief Cutting a hierarchical clustering tree at a certain height to obtain flat clusters.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#cut_hclust_tree_syntax">Syntax</a>
<li class="level1"><a href="#cut_hclust_tree_example">Example</a>
</ul>
</div>

@about
This function cuts a hierarchical clustering tree (e.g. produced by \ref grp_complete_linkage) at a given height to obtain flat clustering of data points. In a hierarchical clustering tree, two lower level clusters are merged to form a new cluster in the next level. The new cluster is placed at a height that equals to the distance between the merged clusters. The interpretation of the height value depends on the specific choice of clustering method. For example, cutting a complete-linkage (cf \ref grp_complete_linkage) tree at height \f$h\f$ means that all data points in a cluster are less than \f$h\f$ apart from each other.

@anchor cut_hclust_tree_syntax
@par Syntax
<pre class="syntax">
FUNCTION cut_hclust_tree(dist_tab TEXT, id1 TEXT, id2 TEXT, dist TEXT, hclust_tree_tab TEXT, height FLOAT, output TEXT)
RETURNS VOID;
</pre>

@param dist_tab Table that contains pairwise distances of data. It is sufficient to provide only the lower or upper triangular part of the distance matrix.
@param id1 ID column of data point 1 in \a dist_tab.
@param id2 ID column of data point 2 in \a dist_tab.
@param dist Column of pairwise distance. (Missing rows are taken to be 0 distance.)
@param hclust_tree_tab Table that contains the clustering tree e.g. produced by \ref grp_complete_linkage.
@param height Height to cut the tree.
@param output Output table containing for each cluster the cluster ID, list of members, height and exemplar. An exemplar is the
data point which has the shortest average distance to its peers in the cluster.

@sa \ref grp_complete_linkage (for building a hierarchical clustering tree).

@anchor cut_hclust_tree_example
@examp

See \ref grp_complete_linkage for a usage example.

*/



/**
 * @internal
 * @brief Data type to indicate if a cluster is already merged into other cluster (inactive) or not.
*/
CREATE TYPE PDLTOOLS_SCHEMA.__clink_cluster_activeness AS (
    cluster_id INT[],
    active INT[]
);


/**
 * @internal
 * @brief Data type to represent the nearest neighbors of all the clusters.
*/
CREATE TYPE PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete AS (
    cluster_id INT[],
    nn INT[],
    member TEXT[],
    height FLOAT8[]
);



/**
 * @brief Build a complete-linkage hierarchical clustering tree.
 *
 * @param dist_tab Table that contains pairwise distances of data. It suffices to 
 * provide only the lower or upper triangular part of the distance matrix.
 * @param id1 ID column of data point 1 in dist_tab.
 * @param id2 ID column of data point 2 in dist_tab.
 * @param dist Column of pairwise distances. (Missing rows are taken to be 0 distance.)
 * @param output Name of the result table, containing the constructed hierarchical clustering tree.
 * @param stop_criterion Stopping criterion used to stop the clustering. Use 'max_iter' to stop the clustering after 
 *        a max number of iterations (NULL to build the entire clustering tree). Use 'threshold' to stop the clustering after
 *        the max distance between clusters reaches a threshold value. 
 * @param iter Value corresponding to the stop_criterion
 *
 * Sample usage: SELECT complete_linkage('test_dist','id1','id2','dist','test_output',NULL);
 *
 * See also the cut_hclust_tree_complete() function for cutting the clustering tree to form flat clusters.
 *
 */ 
CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.complete_linkage(dist_tab TEXT, id1 TEXT, id2 TEXT, dist TEXT, output TEXT, stop_criterion TEXT, iter NUMERIC) 
RETURNS VOID AS $$
    DECLARE
        sql TEXT; 
        dist_mat TEXT;
        set_of_nn PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete;
        new_nn PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete;
        cluster_activeness PDLTOOLS_SCHEMA.__clink_cluster_activeness;
        n INT;
        clust_id_end INT;
        result RECORD;
        max_iter INT;
        max_height NUMERIC;
    BEGIN

        -- Create a symmetric distance matrix from dist_tab to facilitate 
        -- the process of finding the nearest neighbor.
        EXECUTE('SELECT ''__complete_linkage_'' || PDLTOOLS_SCHEMA.__random_str(10)') INTO dist_mat;
      
        sql = 'CREATE TABLE '|| dist_mat ||' (i INT, j INT, dist FLOAT8) DISTRIBUTED RANDOMLY';
        EXECUTE sql;

        sql = 'INSERT INTO ' || dist_mat ||' 
            SELECT ' || id1 || ',' || id2 || ',' || dist || ' 
            FROM ' || dist_tab || ' 
            WHERE ' || id1 || '<>' || id2 || ' 
            GROUP BY ' || id1 || ',' || id2 || ',' || dist;
        EXECUTE sql;

        sql = 'INSERT INTO ' || dist_mat ||' 
            SELECT ' || id2 || ',' || id1 || ',' || dist || ' 
            FROM ' || dist_tab || ' 
            WHERE ' || id1 || '<>' || id2 || ' 
            GROUP BY ' || id1 || ',' || id2 || ',' || dist;
        EXECUTE sql;

        -- Analyze the distance table so that the database
        -- can collect some statistics for query optimization.
        EXECUTE('ANALYZE ' || dist_mat);
        
        -- Prepare the output table. It will be expanded as
        -- clusters are merged.
        sql = 'CREATE TABLE '|| output ||' AS (
            SELECT (row_number() OVER(ORDER BY id))::INT cluster_id, 
            array[id] member, NULL::INT[] children, 0.0::FLOAT8 height
            FROM (
            SELECT DISTINCT i id FROM ' || dist_mat || '
            ) foo 
            ) DISTRIBUTED BY (cluster_id)';
        EXECUTE sql;

        -- It's essential to analyze the output table so that the database
        -- can collect some statistics for query optimization.
        EXECUTE('ANALYZE ' || output);

        -- Number of data to cluster.
        EXECUTE('SELECT count(distinct i)::INT FROM ' || dist_mat) INTO n;

        -- Keep track of cluster activeness. A cluster is de-activated when merged.
        SELECT array_agg(i::INT) cluster_id, array_agg(1::INT) active FROM generate_series(1,n) i INTO cluster_activeness;

        -- Largest cluster id so far. It will be incremented by 1 
        -- each time when two clusters are merged.
        clust_id_end = n;
   
        SELECT * FROM PDLTOOLS_SCHEMA.__clink_init_nn_table_complete(dist_mat, output, cluster_activeness) INTO set_of_nn;
        
        -- Determine stop criterion 
        IF iter IS NULL THEN
            max_iter = n-1;
            max_height = 1e16;
        ELSIF stop_criterion = 'max_iter' THEN 
            max_iter = iter;
            max_height = 1e16;
        ELSIF stop_criterion = 'threshold' THEN 
            max_iter = n-1;
            max_height = iter;
        ELSE 
            max_iter = n-1;
            max_height = 1e16;
        END IF;

        -- Start the main loop. 
        FOR i IN 1..least(max_iter, (n-1)) LOOP
            LOOP 
                -- Find the pair of clusters with the shortest distance between them.
                SELECT a.*, b.active nn_active
                    FROM (
                    SELECT unnest(set_of_nn.cluster_id) cluster_id,
                    unnest(set_of_nn.nn) nn,
                    unnest(set_of_nn.member) member,
                    unnest(set_of_nn.height) height
                    ) a JOIN (
                    SELECT unnest(cluster_activeness.cluster_id) cluster_id, 
                    unnest(cluster_activeness.active) active
                    ) b ON (nn = b.cluster_id)
                    WHERE a.height < max_height
                    ORDER BY a.height, b.active DESC, a.cluster_id 
                    LIMIT 1 INTO result;

                EXIT WHEN result IS NULL; 
                
                EXIT WHEN result.nn_active = 1;

                -- When the found nearest neighbor (NN) is not "active" 
                -- (i.e., already been merged to another cluster), update the 
                -- nearest neighbor table. 
                SELECT * FROM PDLTOOLS_SCHEMA.__clink_update_nn_table_complete(dist_mat, output, result.cluster_id, cluster_activeness) INTO new_nn;
                set_of_nn.nn[result.cluster_id] = new_nn.nn[1];
                set_of_nn.member[result.cluster_id] = new_nn.member[1];
                set_of_nn.height[result.cluster_id] = new_nn.height[1];              
                
            END LOOP;

            -- Exit the main loop when all pairs of clusters with finite 
            -- inter-cluster distances have been merged.
            EXIT WHEN result IS NULL;

            -- "De-activate" the found NNs in the output table.
            cluster_activeness.active[result.cluster_id] = 0;
            cluster_activeness.active[result.nn] = 0;


            -- Exclude the found NNs from future process, by setting 
            -- their heights to the pre-specified maximum height.
            set_of_nn.height[result.cluster_id] = 1e16;
            set_of_nn.height[result.nn] = 1e16;


            -- Add the newly merged cluster to the output table.
            clust_id_end = clust_id_end + 1;
            sql = 'INSERT INTO ' || output || ' 
                VALUES (' || CAST(clust_id_end AS TEXT) || ',
                regexp_split_to_array(' || quote_literal(result.member) || ',' || quote_literal(E'\\s+') || ')::INT[],
                array[' || CAST(result.cluster_id AS TEXT) || ',' || CAST(result.nn AS TEXT) || '],' ||
                CAST(result.height AS TEXT) || ')';
            EXECUTE sql;

            -- Set the activeness of the new cluster.
            cluster_activeness.cluster_id = cluster_activeness.cluster_id || array[clust_id_end];
            cluster_activeness.active = cluster_activeness.active || array[1::INT];

            -- Expand the nearest neighbor table to include the newly formed cluster.
            IF i < (n-1) THEN
                SELECT * FROM PDLTOOLS_SCHEMA.__clink_expand_nn_table_complete(dist_mat, output, clust_id_end, cluster_activeness) INTO new_nn;
                set_of_nn.cluster_id = set_of_nn.cluster_id || array[clust_id_end];
                set_of_nn.nn = set_of_nn.nn || new_nn.nn;
                set_of_nn.member = set_of_nn.member || new_nn.member;
                set_of_nn.height =  set_of_nn.height || new_nn.height;

            END IF;

        END LOOP;

        -- Clean up temporary tables.
        EXECUTE('DROP TABLE '|| dist_mat);

    END
$$ LANGUAGE PLPGSQL; 

/**
 * @brief Cut the clustering tree produced by the complete_linkage() function
 * at a certain height, and find the exemplar of each cluster. An exemplar is the
 * data point which has the shortest average distance to its peers in the cluster.
 *
 * @param dist_tab Table that contains pairwise distances of data. It suffices to 
 * provide only the lower or upper triangular part of the distance matrix.
 * @param id1 ID column of data point 1 in dist_tab.
 * @param id2 ID column of data point 2 in dist_tab.
 * @param dist Column of pairwise distance. (Missing rows are taken to be 0 distance.)
 * @param hclust_tree_tab Table that contains the clustering tree produced by complete_linkage().
 * @param height Height to cut the tree.
 * @param output Output table containing cluster IDs, members of clusters, 
 * heights (complete-linkage distances) of clusters, and exemplars.
 *
 * Sample usage: SELECT PDLTOOLS_SCHEMA.cut_hclust_tree('test_dist','id1','id2','dist','test_output',0.5,'test_cluster');
 * SELECT * FROM test_cluster;
 *
 */ 

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.cut_hclust_tree(dist_tab TEXT, id1 TEXT, id2 TEXT, dist TEXT, 
    hclust_tree_tab TEXT, height FLOAT, output TEXT)
RETURNS VOID AS $$
    DECLARE
        sql TEXT;
        temp_tab TEXT;
        temp_unnest_tab TEXT;
    BEGIN
        EXECUTE('SELECT ''__complete_linkage_'' || PDLTOOLS_SCHEMA.__random_str(10)') INTO temp_tab;
        -- EXECUTE('DROP TABLE IF EXISTS ' || temp_tab);
        EXECUTE('SELECT ''__complete_linkage_'' || PDLTOOLS_SCHEMA.__random_str(10)') INTO temp_unnest_tab;

        -- Cut the clustering tree at the given height.
        sql = 'CREATE TABLE '|| temp_tab || ' AS (
            SELECT cluster_id, member, height
            FROM (
            SELECT (row_number() OVER(ORDER BY height))::INT cluster_id, member, height 
            FROM '|| hclust_tree_tab ||' 
            WHERE cluster_id IN (
            SELECT cluster_id FROM '|| hclust_tree_tab ||' WHERE height <= '|| CAST(height AS TEXT) ||'
            EXCEPT
            SELECT unnest(children) FROM '|| hclust_tree_tab ||' WHERE height <= '|| CAST(height AS TEXT) ||
            ')
            ) foo
            ) DISTRIBUTED RANDOMLY';
        EXECUTE sql;

        sql = 'CREATE TABLE ' || temp_unnest_tab || ' AS (
                 SELECT cluster_id, unnest(member) AS member
                 FROM ' || temp_tab || ') DISTRIBUTED RANDOMLY';
        EXECUTE sql;

        -- Find the exemplar of each cluster.
        -- EXECUTE('DROP TABLE IF EXISTS ' || output);
        sql = 'CREATE TABLE '|| output ||' AS (
            SELECT a.*, b.i exemplar
            FROM '
            || temp_tab || ' a
            JOIN
            (
            SELECT cluster_id, member i
            FROM (
                SELECT *, row_number() OVER(PARTITION BY cluster_id ORDER BY avg_dist) rn
                FROM (
                    SELECT cluster_id, member, avg(coalesce(dist,0)) avg_dist
                    FROM '
                    || temp_unnest_tab || '
                    LEFT JOIN
                    (
                    (SELECT '|| id1 || ' i, ' || id2 || ' j, ' || dist || ' dist FROM '|| dist_tab ||
                    ' JOIN ' || temp_unnest_tab || ' a ON ('|| id1 || '= a.member) JOIN ' || temp_unnest_tab || ' b ON ('|| id2 || '= b.member)
                    WHERE a.cluster_id = b.cluster_id)
                    UNION
                    (SELECT '|| id2 || ' i, ' || id1 || ' j, ' || dist || ' dist FROM '|| dist_tab ||
                    ' JOIN ' || temp_unnest_tab || ' a ON ('|| id1 || '= a.member) JOIN ' || temp_unnest_tab || ' b ON ('|| id2 || '= b.member)
                    WHERE a.cluster_id = b.cluster_id)
                    ) b ON (member = i)
                    GROUP BY cluster_id, member
                ) foo
            ) foo 
            WHERE rn = 1
            ) b USING(cluster_id)
            ) DISTRIBUTED BY (cluster_id)';
        EXECUTE sql;

        -- Clean up the temporary table.
        EXECUTE('DROP TABLE ' || temp_tab);
        EXECUTE('DROP TABLE ' || temp_unnest_tab);

    END;
$$ LANGUAGE PLPGSQL;





/**
 * @internal
 * @brief Find the nearest neighbor of a cluster based on complete-linkage distances.
 * 
 * @param dist_tab Table that contains pairwise distances of data. It suffices to 
 * provide only the lower or upper triangular part of the distance matrix. 
 * @param clust_tab Table that contains the clustering tree.
 * @param clusta_id Array of clusters to find nearest neighbors for.
 * @return Returns the nearest neighbors of the given set of clusters.
 *
 * This function is called by functions within complete_linkage().
 *
 */
  
CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.__clink_find_nn_complete(dist_tab TEXT, clust_tab TEXT, clusta_id INT[], cluster_activeness PDLTOOLS_SCHEMA.__clink_cluster_activeness)
RETURNS PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete AS $$
    DECLARE 
        sql TEXT; 
        nn PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete;   
    BEGIN      
        sql = 'SELECT array_agg(q.cluster_id ORDER BY q.cluster_id) cluster_id, 
            array_agg(p.nn ORDER BY q.cluster_id) nn, 
            array_agg(array_to_string(a.member || b.member, ' || quote_literal(' ') || ') ORDER BY q.cluster_id) member, 
            array_agg(coalesce(p.height, 1e16) ORDER BY q.cluster_id) height
            FROM
            (SELECT *
            FROM (
            SELECT clusta cluster_id, clustb nn, height,
            row_number() OVER(PARTITION BY clusta ORDER BY height, clustb) rn
            FROM
            (SELECT clusta, clustb, 
            CASE WHEN count(j) = max(clusta_size)*max(clustb_size)
            THEN greatest(max(dist), greatest(max(clusta_height), max(clustb_height)))
            ELSE 1e16 END height
            FROM ' ||
            dist_tab || ' dist_tab JOIN 
            (SELECT cluster_id clusta, unnest(member) clusta_member_i, member clusta_member, height clusta_height, array_upper(member,1) clusta_size
            FROM '|| clust_tab ||' 
            JOIN (
            SELECT unnest(array[' || array_to_string(cluster_activeness.cluster_id,',')|| ']::INT[]) cluster_id, 
            unnest(array[' || array_to_string(cluster_activeness.active,',') || ']::INT[]) active
            ) foo
            USING (cluster_id)
            WHERE foo.active = 1
            AND cluster_id IN (' || array_to_string(clusta_id, ',') || ')
            ) a ON (i = clusta_member_i)
            JOIN 
            (SELECT cluster_id clustb, unnest(member) clustb_member_i, member clustb_member, height clustb_height, array_upper(member,1) clustb_size
            FROM '|| clust_tab ||'  
             JOIN (
            SELECT unnest(array[' || array_to_string(cluster_activeness.cluster_id,',')|| ']::INT[]) cluster_id, 
            unnest(array[' || array_to_string(cluster_activeness.active,',') || ']::INT[]) active
            ) foo
            USING (cluster_id)
            WHERE foo.active = 1
            ) b
            ON (j = clustb_member_i AND clusta <> clustb)
            GROUP BY clusta, clustb
            ) foo
            ) foo
            WHERE rn = 1
            ) p
            RIGHT JOIN
            (SELECT unnest(array[' || array_to_string(clusta_id, ',') || ']) cluster_id 
            ) q ON(p.cluster_id = q.cluster_id) 
            LEFT JOIN '|| clust_tab ||' a ON (q.cluster_id = a.cluster_id)
            LEFT JOIN '|| clust_tab ||' b ON (p.nn = b.cluster_id)';

        EXECUTE sql INTO nn;

        RETURN nn;
        
    END;   
$$ LANGUAGE PLPGSQL;




/**
 * @internal
 * @brief Initialize the nearest neighbor table.
 * 
 * @param dist_tab Table that contains pairwise distances of data. It suffices to 
 * provide only the triangular part of the distance matrix. 
 * @param clust_tab Table that contains the clustering tree.
 * @param nn_tab Table to save nearest neighbors.
 *
 * This function is called by complete_linkage().
 *
 */
 
CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.__clink_init_nn_table_complete(dist_tab TEXT, clust_tab TEXT, cluster_activeness PDLTOOLS_SCHEMA.__clink_cluster_activeness)
RETURNS PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete AS $$

    DECLARE 
        sql TEXT;
        all_clust INT[];
        nn PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete;          
    BEGIN
        sql = 'SELECT array_agg(cluster_id) FROM '|| clust_tab;
        EXECUTE sql INTO all_clust;

        SELECT * FROM PDLTOOLS_SCHEMA.__clink_find_nn_complete(dist_tab, clust_tab, all_clust, cluster_activeness) INTO nn;

        return nn;       
    END;
$$ LANGUAGE PLPGSQL;



/**
 * @internal
 * @brief Update the nearest neighbor table.
 * 
 * @param dist_tab Table that contains pairwise distances of data. It suffices to 
 * provide only the lower or upper triangular part of the distance matrix. 
 * @param clust_tab Table that contains the clustering tree.
 * @param nn_tab Table to save nearest neighbors.
 * @param clust_id ID of the cluster that requires an updated nearest neighbor.
 *
 * This function is called by complete_linkage().
 *
 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.__clink_update_nn_table_complete(dist_tab TEXT, clust_tab TEXT, clust_id INT, cluster_activeness PDLTOOLS_SCHEMA.__clink_cluster_activeness)
RETURNS PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete AS $$

    DECLARE 
        sql TEXT;
        nn PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete;   
    BEGIN       
                
        SELECT * FROM PDLTOOLS_SCHEMA.__clink_find_nn_complete(dist_tab, clust_tab, array[clust_id], cluster_activeness) INTO nn;     
        RETURN nn;
          
    END;
$$ LANGUAGE PLPGSQL;



/**
 * @internal
 * @brief Expand the nearest neighbor table to include the newly formed cluster.
 * 
 * @param dist_tab Table that contains pairwise distances of data. It suffices to 
 * provide only the lower or upper triangular part of the distance matrix. 
 * @param clust_tab Table that contains the clustering tree.
 * @param nn_tab Table to save nearest neighbors.
 * @param new_clust_id ID of the new cluster.
 *
 * This function is called by complete_linkage().
 *
 */
CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.__clink_expand_nn_table_complete(dist_tab TEXT, clust_tab TEXT, new_clust_id INT, cluster_activeness PDLTOOLS_SCHEMA.__clink_cluster_activeness)
RETURNS PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete AS $$

    DECLARE 
        sql TEXT;
        nn PDLTOOLS_SCHEMA.__clink_set_of_nearest_clust_complete;     
    BEGIN       

        SELECT * FROM PDLTOOLS_SCHEMA.__clink_find_nn_complete(dist_tab, clust_tab, array[new_clust_id], cluster_activeness) INTO nn;     

        RETURN nn;
 
    END;
$$ LANGUAGE PLPGSQL;




/**
 * @internal
 * @brief Create a random string (e.g. used as temporary table names).
 *
 * @param len Length of the random string.
 * @return Returns a random string of the given length.
 *
 * Sample usage: SELECT __clink_random_str(6);
 *
 */ 
 


CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.complete_linkage() 
RETURNS TEXT AS $$
SELECT '
complete_linkage: Complete-linkage agglomerative hierarchical clustering.

This function implements the commonly used complete-linkage hierarchical
clustering algorithm.  It constructs a hierarchical clustering tree from
bottom up by merging closest clusters. Complete-linkage clustering defines the
distance between two clusters as the distance between the farthest pair of
data points in the two clusters. Given a hierarchical clustering tree, one can
cut the tree at a certain height to obtain flat clusters of data points
(cf. cut_hclust_tree).

For full usage instructions, run "PDLTOOLS_SCHEMA.complete_linkage(''usage'')".
'::TEXT;
$$ LANGUAGE SQL;



CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.complete_linkage(TEXT) 
RETURNS TEXT AS $$

SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.complete_linkage() ELSE 
'complete_linkage: Complete-linkage agglomerative hierarchical clustering.

This function implements the commonly used complete-linkage hierarchical
clustering algorithm. It constructs a hierarchical clustering tree from bottom
up by merging closest clusters. Complete-linkage clustering defines the
distance between two clusters as the distance between the farthest pair of
data points in the two clusters. Given a hierarchical clustering tree, one can
cut the tree at a certain height to obtain flat clusters (cf. cut_hclust_tree)

Syntax
======

FUNCTION PDLTOOLS_SCHEMA.complete_linkage(dist_tab TEXT, id1 TEXT, id2 TEXT,
                                          dist TEXT, output TEXT, iter INT) 
RETURNS VOID;

dist_tab - Table that contains pairwise distances of data. It suffices to
           provide only non-zero elements in the lower or upper triangular
           part of the distance matrix.
id1      - ID column of data point 1 in dist_tab.
id2      - ID column of data point 2 in dist_tab.
dist     - Column of pairwise distances. (Missing rows are taken to be 0 distance.)
output   - Name of the result table, containing the constructed hierarchical
           clustering tree.
stop_criterion     - Stopping criterion used to stop the clustering. Use ''max_iter'' to stop the clustering 
                    after a max number of iterations. Use ''threshold'' to stop the clustering after the max distance between
                    clusters reaches a threshold value.
iter     - Value corresponding to the stop criterion.

See also cut_hclust_tree for cutting the clustering tree to form flat
clusters.

Usage
=====

This function operates on pairwise distances between data points. They are
expected to be provided in a table of the following structure:

TABLE/VIEW input_table
(
    ...
    id1 INT, -- ID of point 1
    id2 INT, -- ID of point 2
    dist FLOAT8, -- distance between points 1 and 2
    ...
);

The distance measure is assumed to be non-negative and symmetric (but not
necessarily a proper distance metric). Let A denote the distance matrix with
A_ij being the distance between data points i and j. It is sufficient to only
provide non-zero entries in the lower or upper triangular part of A. The
obtained hierarchical clustering tree is saved in a user-specified output
table. The output table is to be used as input to the cut_hclust_tree()
function to produce flat clusters.

The output is a table that specifies the constructed hierarchical clustering
tree. It contains cluster IDs, members of clusters, IDs of immediate children
clusters, and heights of clusters. This table is expected to be used as input
to cut_hclust_tree to form flat clusters.

The output currently includes also a column called "active". This is only
for internal use inside the complete_linkage function.

Example
=======

1. Create a test pairwise distance matrix

CREATE TEMP TABLE complete_linkage_test_dist (id1 INT, id2 INT, dist FLOAT)
DISTRIBUTED RANDOMLY;

INSERT INTO complete_linkage_test_dist VALUES
(1,2,0), 
(1,3,1),
(1,4,5),
(2,3,2),
(2,4,4),
(3,4,3);

2. Build a hierarchical clustering tree
SELECT PDLTOOLS_SCHEMA.complete_linkage(''complete_linkage_test_dist'',
             ''id1'',''id2'',''dist'',''complete_linkage_test_output'',NULL);

3. Cut the clustering tree at a certain height  (2 in the example) to obtain
flat clusters.
SELECT PDLTOOLS_SCHEMA.cut_hclust_tree(''complete_linkage_test_dist'',''id1'',
             ''id2'',''dist'',''complete_linkage_test_output'',2,
             ''complete_linkage_test_cluster'');

The cluster_id column in the output table complete_linkage_test_cluster
indicates data assignment.

SELECT * from test_cluster;

 cluster_id | member  | height | exemplar 
------------+---------+--------+----------
          2 | {3,1,2} |      2 |        1
          1 | {4}     |      0 |        4
(2 rows)


' END;
    
$$ LANGUAGE SQL;




CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.cut_hclust_tree() 
RETURNS TEXT AS $$
SELECT '
cut_hclust_tree: Cut a hierarchical clustering tree at a certain height to
obtain flat clusters.

This function cuts a hierarchical clustering tree (e.g. produced by
complete_linkage) at a given height to obtain flat clustering of data points.
In a hierarchical clustering tree, two lower level clusters are merged to form
a new cluster in the next level. The new cluster is placed at a height that
equals to the distance between the merged clusters. The interpretation of the
height value depends on the specific choice of clustering method. For example,
cutting a complete-linkage tree at height h means that all data points in a
cluster are less than h apart from each other. See also complete_linkage for
building a complete-linkage hierarchical clustering tree.

For full usage instructions, run "PDLTOOLS_SCHEMA.cut_hclust_tree(''usage'')".
'::TEXT;
$$ LANGUAGE SQL;



CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.cut_hclust_tree(TEXT) 
RETURNS TEXT AS $$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.cut_hclust_tree() ELSE '
cut_hclust_tree: Cut a hierarchical clustering tree at a certain height to
obtain flat clusters.

This function cuts a hierarchical clustering tree (e.g. produced by
complete_linkage) at a given height to obtain flat clustering of data points.
In a hierarchical clustering tree, two lower level clusters are merged to form
a new cluster in the next level. The new cluster is placed at a height that
equals to the distance between the merged clusters. The interpretation of the
height value depends on the specific choice of clustering method. For example,
cutting a complete-linkage tree at height h means that all data points in a
cluster are less than h apart from each other. See also complete_linkage for
building a hierarchical clustering tree.

Syntax
======
FUNCTION PDLTOOLS_SCHEMA.cut_hclust_tree(dist_tab TEXT, id1 TEXT, id2 TEXT,
    dist TEXT, hclust_tree_tab TEXT, height FLOAT, output TEXT)
RETURNS VOID;


dist_tab        - Table that contains pairwise distances of data. It suffices
                  to provide only the lower or upper triangular part of the
                  distance matrix.
id1             - ID column of data point 1 in dist_tab.
id2             - ID column of data point 2 in dist_tab.
dist            - Column of pairwise distance. (Missing rows are taken to be 0 distance.)
hclust_tree_tab - Table that contains the clustering tree e.g. produced by
                  complete_linkage.
height          - Height to cut the tree.
output          - Output table containing for each cluster the cluster ID,
                  list of members, height and exemplar. An exemplar
                  is the data point which has the shortest average distance to
                  its peers in the cluster.

Usage
=====

The following usage example shows how to build and cut a complete-linkage
clustering tree to obtain flat clustering of data points.

1. Create a test pairwise distance matrix

CREATE TEMP TABLE complete_linkage_test_dist (id1 INT, id2 INT, dist FLOAT)
DISTRIBUTED RANDOMLY;

INSERT INTO complete_linkage_test_dist VALUES
(1,2,0), 
(1,3,1),
(1,4,5),
(2,3,2),
(2,4,4),
(3,4,3);


2. Build a hierarchical clustering tree
SELECT PDLTOOLS_SCHEMA.complete_linkage(''complete_linkage_test_dist'',
              ''id1'',''id2'',''dist'',''complete_linkage_test_output'',NULL,NULL);

3. Cut the clustering tree at a certain height  (2 in the example) to obtain
flat clusters.
SELECT PDLTOOLS_SCHEMA.cut_hclust_tree(''complete_linkage_test_dist'',''id1'',
              ''id2'',''dist'',''complete_linkage_test_output'',2,
              ''complete_linkage_test_cluster'');

The cluster_id column in the output table complete_linkage_test_cluster
indicates data assignment.

SELECT * from test_cluster;

 cluster_id | member  | height | exemplar 
------------+---------+--------+----------
          2 | {3,1,2} |      2 |        1
          1 | {4}     |      0 |        4
(2 rows)


'END;
$$ LANGUAGE SQL;

