/* ----------------------------------------------------------------------- *//**

@file uri_utils.sql_in

@brief A set of utilities for parsing and extracting URIs from text.

@author Written by Michael Brand, wrapping functionality from the <code>uriparser</code> library [under new BSD license].
@date 22 Aug 2013

 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_uri_type

@brief Information about a URI.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#uri_type_syntax">Syntax</a>
<li class="level1"><a href="#uri_type_usage">Usage</a>
</ul>
</div>

@about
A URI (URL or URN) is represented by its components:
<code>scheme://userInfo\@hostText:portText/path?query#fragment</code>.

@anchor uri_type_syntax
@par Syntax
<pre class="syntax">
TYPE uri_type AS (
  scheme text,
  userInfo text,            
  hostText text,
  IPv4 bytea,
  IPv6 bytea,
  ipFuture text,
  portText text,
  path text[],
  query text,
  fragment text,
  absolutePath boolean,
  key text[],
  value text[]
);
</pre>

@anchor uri_type_usage
@usage
If the host name is numeric in either IPv4 or IPv6 format, it is parsed and
represented in either the \c "IPv4" or \c "IPv6" element. \c "ipFuture" is
meant to support additional formats in the future.

\c "path" is stored as an array of path components, so \c "/usr/local/lib" is
parsed as <code>['usr','local','lib']</code>.

\c "absolutePath" is a Boolean, indicating whether a file path is absolute
or relative.

\c "key" and \c "value", if not \c NULL, are parsed versions of the query
string. <code>key[i]</code> and <code>value[i]</code> hold the information for
the <code>i</code>'th key-value pair in the query string.

@warning It is preferable not to use user-defined types such as "uri_type" as column types, even though they are fully-functionable as such. The reason for this is that when the library is upgraded, the column types will not get upgraded with it.

@sa grp_uri_array_type
 */

-- DROP TYPE IF EXISTS PDLTOOLS_SCHEMA.uri_type CASCADE;

CREATE TYPE PDLTOOLS_SCHEMA.uri_type AS (
  scheme text,
  userInfo text,            
  hostText text,
  IPv4 bytea,
  IPv6 bytea,
  ipFuture text,
  portText text,
  path text[],
  query text,
  fragment text,
  absolutePath boolean,
  key text[],
  value text[]
);

-- DROP TYPE IF EXISTS PDLTOOLS_SCHEMA.uri_array_type CASCADE;

/**
@addtogroup grp_uri_array_type

@brief Information about an ordered collection of URI.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#uri_array_type_syntax">Syntax</a>
<li class="level1"><a href="#uri_array_type_usage">Usage</a>
</ul>
</div>

@about
Same as \ref grp_uri_type, but each element is an array, holding data for an
entire collection.

@anchor uri_array_type_syntax
@par Syntax
<pre class="syntax">
TYPE uri_array_type AS (
  scheme text[],
  userInfo text[],
  hostText text[],
  IPv4 bytea[],
  IPv6 bytea[],
  ipFuture text[],
  portText text[],
  path text[],
  query text[],
  fragment text[],
  absolutePath boolean[],
  uri text[]
);
</pre>

@anchor uri_array_type_usage
@usage

The storage format for \c uri_array_type is very similar to that of
\c uri_type, but with the following differences:

\c "path" is kept unparsed, as a single <code>"/"</code>-separated string, for
each URI. Key-value pairs are not extracted from the query.
The original uri is kept in the variable \c "uri", in its original form.

@warning It is preferable not to use user-defined types such as "uri_array_type" as column types, even though they are fully-functionable as such. The reason for this is that when the library is upgraded, the column types will not get upgraded with it.

@sa grp_uri_type
 */

CREATE TYPE PDLTOOLS_SCHEMA.uri_array_type AS (
  scheme text[],
  userInfo text[],
  hostText text[],
  IPv4 bytea[],
  IPv6 bytea[],
  ipFuture text[],
  portText text[],
  path text[],
  query text[],
  fragment text[],
  absolutePath boolean[],
  uri text[]
);

/**
@addtogroup grp_parse_uri

@brief Parse a URI into its components.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#parse_uri_syntax">Syntax</a>
<li class="level1"><a href="#parse_uri_usage">Usage</a>
<li class="level1"><a href="#parse_uri_example">Example</a>
</ul>
</div>

@about
A row function, parsing URIs in text format to parsed URIs in uri_type.

@anchor parse_uri_syntax
@par Syntax
<pre class="syntax">
FUNCTION parse_uri(uri text, normalize boolean, parse_query boolean)
RETURNS uri_type;
</pre>

@param uri Original URI in text form.
@param normalize Boolean stating whether parsed URI should be returned in
            normalized form (e.g. with lowercase domain name and consistent
            handling of special characters).
@param parse_query Boolean stating whether query portion should be separated
             into key-value pairs. If not, \c "key" and \c "value are returned
             <code>NULL</code>s.

@returns The parsed URI.

@anchor parse_uri_usage
@usage
Returns a \c uri_type. Note that the fields \c "key" and \c "value" include the
actual decoded content of the key-value parameters. As such, they are not
affected by the question of whether \c "normalize" is true or false.

@anchor parse_uri_example
@examp
@verbatim
user=# \x
Expanded display is on.
user=# SELECT * FROM parse_uri('https://myself:password@www.Pivotal.io:80/%7ehello/to/you/index.html?who=I&whom=me#here',true,true);
-[ RECORD 1 ]+---------------------------
scheme       | http
userinfo     | myself:password
hosttext     | www.pivotal.io
ipv4         | 
ipv6         | 
ipfuture     | 
porttext     | 80
path         | {~hello,to,you,index.html}
query        | who=I&whom=me
fragment     | here
absolutepath | f
key          | {who,whom}
value        | {I,me}
@endverbatim

@sa grp_uri_type
 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.parse_uri(uri text, normalize boolean,
                                   parse_query boolean)
RETURNS PDLTOOLS_SCHEMA.uri_type
AS 'MODULE_PATHNAME','parse_uri'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.parse_uri()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT $__STRING__$
parse_uri: Parse a URI into its components.

A row function, parsing URIs in text format to parsed URIs in uri_type.

For full usage instructions, run "PDLTOOLS_SCHEMA.parse_uri(''usage'')".
$__STRING__$::VARCHAR;
$$;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.parse_uri(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.parse_uri() ELSE $__STRING__$
parse_uri: Parse a URI into its components.

A row function, parsing URIs in text format to parsed URIs in uri_type.

Synposis
========
PDLTOOLS_SCHEMA.parse_uri(uri text, normalize boolean, parse_query boolean)
RETURNS uri_type

uri - original URI in text form.
normalize - Boolean stating whether parsed URI should be returned in
            normalized form (e.g. with lowercase domain name and consistent
            handling of special characters).
parse_query - Boolean stating whether query portion should be separated into
              key-value pairs. If not, "key" and "value are returned NULLs.

Usage
=====
Returns a uri_type. Note that the fields "key" and "value" include the actual
decoded content of the key-value parameters. As such, they are not affected by
the questio of whether "normalize" is true or false.

Example
=======
user=# \x
Expanded display is on.
user=# SELECT * FROM PDLTOOLS_SCHEMA.parse_uri('https://myself:password@www.Pivotal.io:80/%7ehello/to/you/index.html?who=I&whom=me#here',true,true);
-[ RECORD 1 ]+---------------------------
scheme       | http
userinfo     | myself:password
hosttext     | www.pivotal.io
ipv4         | 
ipv6         | 
ipfuture     | 
porttext     | 80
path         | {~hello,to,you,index.html}
query        | who=I&whom=me
fragment     | here
absolutepath | f
key          | {who,whom}
value        | {I,me}

See also: uri_type
$__STRING__$ END;
$$;

/**
@addtogroup grp_extract_uri

@brief Extract all URIs embedded in text input.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#extract_uri_syntax">Syntax</a>
<li class="level1"><a href="#extract_uri_usage">Usage</a>
<li class="level1"><a href="#extract_uri_example">Example</a>
</ul>
</div>

@about
A row function, extracting \c uri_array_type from a text field.

@anchor extract_uri_syntax
@par Syntax
<pre class="syntax">
FUNCTION extract_uri(txt text, normalize boolean)
RETURNS uri_array_type;
</pre>

@param txt Text from which URIs are to be extracted.
@param normalize Boolean stating whether parsed URIs should be returned in
            normalized form (e.g. with lowercase domain names and consistent
            handling of special characters).

@returns The extracted URIs.

@anchor extract_uri_usage
@usage
Returns a \c uri_array_type. Note that the \c "uri" field keeps the original URI
exactly in the form that it was in the original text, regardless of whether
\c "normalize" is \c "true" or \c "false".

@anchor extract_uri_example
@examp
@verbatim
user=# \x
Expanded display is on.
user=# SELECT * FROM extract_uri('First go to http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/ then go to https://192.165.0.1/ and repeat.',true);
-[ RECORD 1 ]+-------------------------------------------------------------------------
scheme       | {http,https}
userinfo     | {"",""}
hosttext     | {0123:4567:89ab:cdef:0123:4567:89ab:cdef,192.165.0.1}
ipv4         | {"",300245000001}
ipv6         | {001043105147211253315357001043105147211253315357,""}
ipfuture     | {"",""}
porttext     | {"",""}
path         | {"",""}
query        | {"",""}
fragment     | {"",""}
absolutepath | {f,f}
uri          | {http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/,https://192.165.0.1/}
@endverbatim

@sa grp_uri_array_type
 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.extract_uri(txt text, normalize boolean)
RETURNS PDLTOOLS_SCHEMA.uri_array_type
AS 'MODULE_PATHNAME','extract_uri'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.extract_uri()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT $__STRING__$
extract_uri: Extract all URIs embedded in text input.

A row function, extracting uri_array_type from a text field.

For full usage instructions, run "PDLTOOLS_SCHEMA.extract_uri(''usage'')".
$__STRING__$::VARCHAR;
$$;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.extract_uri(option VARCHAR)
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.extract_uri() ELSE
$__STRING__$ 
extract_uri: Extract all URIs embedded in text input.

A row function, extracting uri_array_type from a text field.

Synposis
========
PDLTOOLS_SCHEMA.extract_uri(txt text, normalize boolean)
RETURNS uri_array_type

txt - Text from which URIs are to be extracted.
normalize - Boolean stating whether parsed URIs should be returned in
            normalized form (e.g. with lowercase domain names and consistent
            handling of special characters).

Usage
=====
Returns a uri_array_type. Note that the "uri" field keeps the original URI
exactly in the form that it was in the original text, regardless of whether
"normalize" is "true" or "false".

Example
=======
user=# \x
Expanded display is on.
user=# SELECT * FROM PDLTOOLS_SCHEMA.extract_uri('First go to http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/ then go to https://192.165.0.1/ and repeat.',true);
-[ RECORD 1 ]+-------------------------------------------------------------------------
scheme       | {http,https}
userinfo     | {"",""}
hosttext     | {0123:4567:89ab:cdef:0123:4567:89ab:cdef,192.165.0.1}
ipv4         | {"",300245000001}
ipv6         | {001043105147211253315357001043105147211253315357,""}
ipfuture     | {"",""}
porttext     | {"",""}
path         | {"",""}
query        | {"",""}
fragment     | {"",""}
absolutepath | {f,f}
uri          | {http://[0123:4567:89ab:cdef:0123:4567:89ab:cdef]/,https://192.165.0.1/}
@endverbatim

See also: uri_array_type
$__STRING__$ END;
$$;


/**
@addtogroup grp_parse_domain

@brief Parse a URI domain name into its components.

<div class="toc"><b>Contents</b>
<ul>
<li class="level1"><a href="#parse_domain_syntax">Syntax</a>
<li class="level1"><a href="#parse_domain_usage">Usage</a>
<li class="level1"><a href="#parse_domain_example">Example</a>
</ul>
</div>

@about
A row function, parsing a textual hierarchical domain name into components.

@anchor parse_domain_syntax
@par Syntax
<pre class="syntax">
FUNCTION parse_domain(domainname text)
RETURNS text[];
</pre>

@param domainname Domain name to be parsed.

@returns Array of domain components.

@anchor parse_domain_usage
@usage
The function splits a textual domain name into its components. This is a
useful convenience function when, for example, only top-level domains are of
interest.

@anchor parse_domain_example
@examp
@verbatim
user=# SELECT parse_domain('www.pivotal.io');
    parse_domain     
---------------------
 {www,pivotal,io}
(1 row)
@endverbatim
 */

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.parse_domain(domainname text)
RETURNS text[]
IMMUTABLE
STRICT
LANGUAGE SQL
AS
$$
SELECT CASE WHEN $1!='usage' THEN regexp_split_to_array($1,E'\\.') ELSE
array[$__STRING__$
parse_domain: Parse a URI domain into its components.

A row function, parsing a textual hierarchical domain name into components.

Synposis
========
PDLTOOLS_SCHEMA.parse_domain(domainname text)
RETURNS text[]

domainname - Domain name to be parsed.

Example
=======
SELECT PDLTOOLS_SCHEMA.parse_domain('www.pivotal.io');
    parse_domain     
---------------------
 {www,pivotal,io}
(1 row)
$__STRING__$] END;
$$;

CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.parse_domain()
RETURNS VARCHAR
IMMUTABLE
LANGUAGE SQL
AS
$$
SELECT $__STRING__$
parse_domain: Parse a URI domain into its components.

A row function, parsing a textual hierarchical domain name into components.

For full usage instructions, run "PDLTOOLS_SCHEMA.parse_domain(''usage'')".
$__STRING__$::VARCHAR;
$$;

