------------------------------------------------------------------------------------------------
-- File: test_grid_search.sql_in
-- Unit test for grid_search module
-------------------------------------------------------------------------------------------------
-- set up test data
CREATE TEMP TABLE test_grid_search(pid int, points double precision[]);

COPY test_grid_search (pid, points) FROM stdin DELIMITER '|';
1 | {14.23, 1.71, 2.43, 15.6, 127, 2.8, 3.0600, 0.2800, 2.29, 5.64, 1.04, 3.92, 1065}
2 | {13.2, 1.78, 2.14, 11.2, 1, 2.65, 2.76, 0.26, 1.28, 4.38, 1.05, 3.49, 1050}
3 | {13.16, 2.36,  2.67, 18.6, 101, 2.8,  3.24, 0.3, 2.81, 5.6799, 1.03, 3.17, 1185}
4 | {14.37, 1.95, 2.5, 16.8, 113, 3.85, 3.49, 0.24, 2.18, 7.8, 0.86, 3.45, 1480}
5 | {13.24, 2.59, 2.87, 21, 118, 2.8, 2.69, 0.39, 1.82, 4.32, 1.04, 2.93, 735}
6 | {14.2, 1.76, 2.45, 15.2, 112, 3.27, 3.39, 0.34, 1.97, 6.75, 1.05, 2.85, 1450}
7 | {14.39, 1.87, 2.45, 14.6, 96, 2.5, 2.52, 0.3, 1.98, 5.25, 1.02, 3.58, 1290}
8 | {14.06, 2.15, 2.61, 17.6, 121, 2.6, 2.51, 0.31, 1.25, 5.05, 1.06, 3.58, 1295}
9 | {14.83, 1.64, 2.17, 14, 97, 2.8, 2.98, 0.29, 1.98, 5.2, 1.08, 2.85, 1045}
10 | {13.86, 1.35, 2.27, 16, 98, 2.98, 3.15, 0.22, 1.8500, 7.2199, 1.01, 3.55, 1045}
\.

-- set k values to try 
\set input_k_values array[1,2,3]


/*=================================================================
*   test grid search for kmeans++ seeding
==================================================================*/

-- case 1: all parameters given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeanspp(
        'pid'
        ,'test_output'
        ,:input_k_values
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ,'madlib.avg'
        ,30
        ,0.001
        ,1.0
    ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;

-- case 2: all parameters but seeding_sample_ratio, min_frax_reassigned, and max_num_iterations given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeanspp(
        'pid'
        ,'test_output'
        ,ARRAY[1,2,3]
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;


/*=================================================================
*   test grid search for kmeans random seeding
==================================================================*/
-- set k values to try 
\set input_k_values array[3,4,5]

-- case 1: all parameters given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeans_random(
        'pid'
        ,'test_output'
        ,:input_k_values
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ,'madlib.avg'
        ,30
        ,0.001
    ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;

-- case 2: all parameters but seeding_sample_ratio, min_frax_reassigned, and max_num_iterations given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeans_random(
        'pid'
        ,'test_output'
        ,:input_k_values
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;























