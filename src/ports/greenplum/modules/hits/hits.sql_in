/* ----------------------------------------------------------------------- *//**                                                                                                
                                                                                                                                                                                
@file hits.sql_in                                                                                                                                                           
                                                                                                                                                                                
@brief HITS algorithm.                                                                                                                                                      
                                                                                                                                                                                
@author Written by Robert Paul Bennett                                                                                                                                                       
@date 06 September 2016                                                                                                                                                                                                                                                                                                                            
 *//* ----------------------------------------------------------------------- */



/**                                                                                                                                                                             
@addtogroup grp_hits                                                                                                                                                        
                                                                                                                                                                                
@brief Use the HITS alogrithm to calculate authority and hub scores of directed graph (https://en.wikipedia.org/wiki/HITS_algorithm).
                                                                                                                                                                                
<div class="toc"><b>Contents</b>                                                                                                                                                
<ul>                                                                                                                                                                            
<li class="level1"><a href="#hits_syntax">Syntax</a>                                                                                                                        
<li class="level1"><a href="#hits_usage">Usage</a>                                                                                                                          
<li class="level1"><a href="#hits_example">Example</a>                                                                                                                      
</ul>                                                                                                                                                                           
</div>                                                                                                                                                                          
                                                                                                                                                                                
@about                                                                                                                                                                          
This function implements the HITS algorithm (https://en.wikipedia.org/wiki/HITS_algorithm).                                                                                       
It measures the relative importance of each node as a Hub and as an Authority in a directed 
graph based on how it is connected to other nodes.                                                                                                                                A high Hub score corresponds to being the source node for many links
A high Authority score corresponds to being the destination node for many links 
                                                                                                                                                                                
For full usage instructions, run "PDLTOOLS_SCHEMA.hits(''usage'')".                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                
@anchor hits_syntax                                                                                                                                                         
@par Syntax                                                                                                                                                                     
<pre class="syntax">                                                                                                                                                            
FUNCTION hits(                                                                                                                                                              
            input_tab TEXT,                                                                                                                                                     
            source_node TEXT,                                                                                                                                                   
            dest_node TEXT,                                                                                                                                                     
            graph_id TEXT,
	    result_tab TEXT,                                                                                                                                                    
            max_iter INT,                                                                                                                                                       
            epsilon FLOAT                                                                                                                                                       
            )                                                                                                                                                                   
RETURNS VOID;                                                                                                                                                                   
</pre>                                                                                                                                                                          
                                
@param input_tab Input table that contains the edges of a directed graph.                                                                                                 
@param source_node Column that specifies source nodes.                                                                                                                       
@param dest_node Column that specifies destination nodes.
@param graph_id Column that specifies groups                                                                                                                   
@param result_tab Table to save HITS results (authority and hub scores).
@param max_iter Maximum number of iterations to run the algorithm.                                                         
@param epsilon Convergence threshold. The function terminates if the L_1 difference of HITS values between two iterations falls below epsilon.                           

@anchor hits_usage                                                                                                                                                          
@usage                                                                                                                                                                          
                                                                                                                                                                                
                                                                                                                                                                                
A directed graph is expected to be provided in a table of the following structure:                                                                                              
\n                                                                                                                                                                              
\code                                                                                                                                                                           

TABLE/VIEW directed_graph                                                                                                                                                       
(                                                                                                                                                                               
    ...                                                                                                                                                                         
    source TEXT/INT/BIGINT,       -- Source node ID                                                                                                                             
    destination TEXT/INT/BIGINT,  -- Destination node ID
    groups  TEXT/INT/BIGING,      -- Group IDs                                                                                                                        
    ...                                                                                                                                                              
)                                                                                                                                                       
                                                                                                                                    
\endcode                                                                                                                                                                                



@anchor hits_example                                                                                                                                                        
@examp                                   

-# Create a test graph of 28 nodes with 3 distinct graphs.
-#   The graph in Group 1 was randomly generaged
-#   The graph in Group 2 has 5 nodes (A .. E) A is the only source and points to all other nodes
-#   The graph in Group 3 has 5 nodes (A .. E) A is the only destination nodes and all other nodes
-#   point to A                                                                                                                                            

\code
CREATE TEMP TABLE hits_test_data (source TEXT, dest TEXT, groups TEXT) DISTRIBUTED RANDOMLY; 
INSERT INTO hits_test_data VALUES                                                                                                                                           
 (''02'', ''12'', ''1''), 
 (''03'', ''07'', ''1''), 
 (''01'', ''07'', ''1''), 
 (''01'', ''10'', ''1''), 
 (''02'', ''12'', ''1''), 
 (''05'', ''07'', ''1''), 
 (''08'', ''05'', ''1''), 
 (''05'', ''05'', ''1''), 
 (''06'', ''09'', ''1''), 
 (''04'', ''12'', ''1''), 
 (''02'', ''06'', ''1''), 
 (''05'', ''12'', ''1''), 
 (''07'', ''12'', ''1''), 
 (''02'', ''12'', ''1''), 
 (''02'', ''07'', ''1''), 
 (''01'', ''10'', ''1''), 
 (''02'', ''06'', ''1''), 
 (''02'', ''12'', ''1''), 
 (''00'', ''09'', ''1''), 
 (''00'', ''07'', ''1''), 
 (''A'', ''B'', ''2''),
 (''A'', ''C'', ''2''),
 (''A'', ''D'', ''2''),
 (''A'', ''E'', ''2''),
 (''B'', ''A'', ''3''),
 (''C'', ''A'', ''3''),
 (''D'', ''A'', ''3''),
 (''E'', ''A'', ''3'');
\endcode
\n

-# Use HITS to calculate the Authority and Hub scores for each node with maximum iteration number to 50, and tolerance threshold to 1e-3.                                     
\code                                                                                                                                                                             SELECT pdltools.hits(''hits_test_data'', ''source'', ''dest'', ''groups'', ''hits_test_output'', 50, 1e-3);                                                               
                                                                                                                                                                                
SELECT * FROM hits_test_output ORDER BY graph_id, node;                                                                                                                           

node |			auth_score |		hub_score	| graph_id
-----+-----------------------------+----------------------------+---------
00   | 0	    		   |	0.12521980588474892303	|	1
01   | 0	    		   |	0.12219535557575501829	|	1
02   | 0	    		   |	0.21427999500813425759	|	1
03   | 0	   		   |	0.10577097101958970168	|	1
04   | 0	    		   |	0.07971544342450081202	|	1
05   | 0.11991351678760373024	   |	0.21957028262085088386	|	1
06   | 0.10130128095894597547	   |	0.01944883486515922136	|	1		
07   | 0.37212234958843970036	   |	0.07971544342450081202	|	1	
08   | 0			   |	0.03408386817676037016	|	1
09   | 0.06842469211557294832	   |	0			|	1
10   | 0.05778410193901261112	   |	0			|	1
12   | 0.28045405861042503450	   |	0			|	1
A    | 0			   |	1.00000000000000000000	|	2
B    | 0.25000000000000000000	   |	0			|	2
C    | 0.25000000000000000000	   |	0			|	2
D    | 0.25000000000000000000	   |	0			|	2
E    | 0.25000000000000000000	   |	0			|	2
A    | 1.00000000000000000000	   |	0			|	3
B    | 0			   |	0.25000000000000000000	|	3
C    | 0			   |	0.25000000000000000000	|	3
D    | 0			   |	0.25000000000000000000	|	3
E    | 0			   |	0.25000000000000000000	|	3

\endcode 
*/



/**
 * @brief Use the HITS alogrithm to calculate authority and hub scores of directed graph (https://en.wikipedia.org/wiki/HITS_algorithm).
 *                                                                                                                                                                              
 * @param input_tab Input table that contains the edges of a directed graph.                                                                                                    
 * @param source_node Column that specifies source nodes.                                                                                                                       
 * @param dest_node Column that specifies destination nodes.
 * @param graph_id Column that specifies groups                                                                                                                   
 * @param result_tab Table to save HITS results (authority and hub scores).
 * @param max_iter Maximum number of iterations to run the algorithm.                                                         
 * @param epsilon Convergence threshold. The function terminates if the L_1 difference of HITS values between two iterations falls below epsilon.                           
 */




create or replace function PDLTOOLS_SCHEMA.hits(input_tab text, source_node text, dest_node text, graph_id text, result_tab text, max_iter int, epsilon numeric)
returns void as
$$
	declare
		hits_temp_node_tab text;
		hits_temp_stat_tab text;
		hits_sparse_adj_matrix text;
		hits_sparse_auth_matrix text;
		hits_iter_tab text;
		hits_iter_tab_scaled text;
		hits_current_tab text;
		hub_score_tab text;
		auth_score_tab text;
		hub_score_tab_norm text;
		auth_score_tab_norm text;
		l1_diff numeric;

	begin


	-- Create table of unique nodes
	execute('select ''hits_temp_node_tab_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_temp_node_tab;
	execute('drop table if exists '|| hits_temp_node_tab);

	execute('create table '|| hits_temp_node_tab ||' 
		(node text, graph_id text)
		distributed by (graph_id)');

	-- Insert unique source nodes
	execute('insert into '|| hits_temp_node_tab ||'
		(node, graph_id)
		select '|| source_node ||'::text as node
		, '|| graph_id ||'::text as graph_id
		from '|| input_tab ||'
		group by '|| source_node ||', '|| graph_id);

	execute ('insert into '|| hits_temp_node_tab ||'
		(node, graph_id)
		select '|| dest_node ||'::text as node, '|| graph_id ||'::text as graph_id
		from '|| input_tab ||' 
		where '||dest_node ||'::text || '|| graph_id ||'::text 
		not in (
			select '|| source_node ||'::text || '|| graph_id ||'::text
			from '|| input_tab ||'
			group by '|| source_node ||', '|| graph_id ||'
			) 
		group by '|| dest_node ||', '|| graph_id);


	-- Create sparse adjacency matrix for the directed graph
	execute('select ''hits_sparse_adj_matrix_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_sparse_adj_matrix;

	execute('drop table if exists '|| hits_sparse_adj_matrix);
	execute('create table '|| hits_sparse_adj_matrix ||' as
		(select '|| source_node ||'::text node1, '|| dest_node ||'::text node2, '|| graph_id ||'::text as graph_id, 1 as value 
		from '|| input_tab ||'
		group by '|| source_node ||', '|| dest_node ||', '||graph_id||')
		distributed by (graph_id)');


	-- Create sparse Authority matrix 
	execute('select ''hits_sparse_auth_matrix_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_sparse_auth_matrix;
	execute('drop table if exists '|| hits_sparse_auth_matrix);

	-- Sparse matrix multiplication 
	/* Auth Matrix = AdjM.Transpose * AdjM */
	execute ('create table '|| hits_sparse_auth_matrix ||' as
		select row_id, col_id, graph_id, value
		from(select a.node2 row_id, b.node2 col_id, a.graph_id as graph_id, sum(a.value*b.value) as value
		from '|| hits_sparse_adj_matrix ||' a, '|| hits_sparse_adj_matrix ||' b
		where a.node1 = b.node1
		and a.graph_id = b.graph_id
		group by a.node2, b.node2, a.graph_id) t0
		where abs(value) >1e-16
		distributed by (graph_id)');
	
	-- Count number of distinct nodes per group
	execute('select ''hits_temp_stat_tab_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_temp_stat_tab;
	execute('drop table if exists '|| hits_temp_stat_tab);
	execute('create table '|| hits_temp_stat_tab ||'
		as (
		select graph_id,
		1.0/count(*) init_hits
		from '|| hits_temp_node_tab ||'
		group by graph_id)
		distributed by (graph_id)');

	-- Initial Authority Score Array
	execute('select ''hits_iter_tab_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_iter_tab;
	execute('drop table if exists '|| hits_iter_tab);

	execute('create table '|| hits_iter_tab ||' as
		select a.*, b.init_hits auth_score 
		from  
		'|| hits_temp_node_tab ||' a
		inner join 
		'|| hits_temp_stat_tab ||' b
		on a.graph_id = b.graph_id
		group by node, a.graph_id, init_hits
		distributed by (graph_id)');

	-- Initialize tables uses inside loop	
	execute('select ''hits_current_tab_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_current_tab;
	execute('select ''hits_iter_tab_scaled_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hits_iter_tab_scaled;

------------------------------------------------------
	for i in 1..max_iter loop

	    execute('drop table if exists '|| hits_current_tab);
	    execute('create table '|| hits_current_tab ||' (like '|| hits_iter_tab ||') WITH (
	    	    FILLFACTOR=95, 
		    APPENDONLY=true, 
		    COMPRESSLEVEL=1, 
		    ORIENTATION=column, 
		    COMPRESSTYPE=quicklz,
		    OIDS=FALSE)
		    DISTRIBUTED by(graph_id)');

	   -- Copy hit_iter_tab to hits_current_tab
	    execute ('insert into '|| hits_current_tab ||' 
		    select * from '|| hits_iter_tab);

            -- Create a new hits_iter_tab
            execute('drop table if exists '|| hits_iter_tab);
	    /* hits_iter_tab = Auth_Matrix * hits_current_tab */
	    execute('create table '|| hits_iter_tab ||' as 
	    	     select node, graph_id, auth_score
		     from(
			select a.row_id as node, a.graph_id as graph_id, sum(a.value*b.auth_score) as auth_score
			from '|| hits_sparse_auth_matrix ||' a, '|| hits_current_tab ||' b
			where a.col_id = b.node
			and a.graph_id = b.graph_id
			group by a.row_id, a.graph_id) t0
		     where abs(auth_score) >1e-16
		     distributed by (graph_id)');

            -- Scale hits_iter_tab/Max(value)	
	    execute('drop table if exists '|| hits_iter_tab_scaled);
	    execute('create table '|| hits_iter_tab_scaled ||' as
		select node
			, graph_id
			, auth_score/max(auth_score) over (partition by graph_id) auth_score
		from '|| hits_iter_tab ||' 
		distributed by (graph_id)');

	    execute('drop table '|| hits_iter_tab);
	    execute('alter table '|| hits_iter_tab_scaled ||' rename to '|| hits_iter_tab);

	    -- Calculate L1 distance between current and previous iterations
 	    execute('select max(abs_diff)from (
			select sum(abs_diff) as abs_diff from (
				select coalesce(c.graph_id, i.graph_id)  graph_id
					, abs(coalesce(c.auth_score, 0) - coalesce(i.auth_score,0)) as abs_diff 
				from '|| hits_current_tab ||' c
				full outer join
				'|| hits_iter_tab ||' i
				on c.node = i.node
				and c.graph_id = i.graph_id
				) as t0
			group by graph_id
			) as t1') into l1_diff;

	   if l1_diff <= epsilon or i = max_iter then
	      exit;
	   end if;
	end loop;
	
	 execute('select ''hub_score_tab_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hub_score_tab;
	 execute('select ''hub_score_tab_norm_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into hub_score_tab_norm;
	 execute('select ''auth_score_tab_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into auth_score_tab;
	 execute('select ''auth_score_tab_norm_'' || PDLTOOLS_SCHEMA.__pagerank_random_str(10)') into auth_score_tab_norm;
	 -- Calculate Hub Scores
	 /* Hub = AdjM * Auth */
	 execute('drop table if exists '|| hub_score_tab);
	 execute('create table '|| hub_score_tab ||' as 
	 		 select node, graph_id, hub_score
			 from(
			 	select a.node1 as node, a.graph_id as graph_id, sum(a.value*b.auth_score) as hub_score
				from '|| hits_sparse_adj_matrix ||' a, '|| hits_iter_tab ||' b
				where a.node2 = b.node
				and a.graph_id = b.graph_id
				group by a.node1, a.graph_id) t0
				where abs(hub_score) >1e-16
			distributed by (graph_id)');	      		     

	-- Normalize Auth Scores
	execute('drop table if exists '|| auth_score_tab_norm);
	execute('create table '|| auth_score_tab_norm ||' as
	select node, auth_score/sum(auth_score) over (partition by graph_id) as auth_score, graph_id
	from '|| hits_iter_tab ||'
	distributed by (graph_id)'); 
	-- Normalize Hub Scores
	execute('drop table if exists '|| hub_score_tab_norm);
	execute('create table '|| hub_score_tab_norm ||' as
	select node,  hub_score/sum(hub_score) over (partition by graph_id) as hub_score , graph_id
	from '|| hub_score_tab ||'
	distributed by (graph_id)'); 
	
	-- Insert Hub and Authority Scores into results table
	execute('drop table if exists '||result_tab );

	execute('create table '|| result_tab ||' as 
		select coalesce(a.node, h.node) as node 
		, coalesce(a.auth_score, 0) as auth_score
		, coalesce(h.hub_score, 0) as hub_score
		, coalesce(a.graph_id, h.graph_id) as graph_id 
		from 
		'|| auth_score_tab_norm ||' a
		full outer join 
		'|| hub_score_tab_norm ||' h
		on a.node = h.node
		and a.graph_id = h.graph_id
		distributed by (graph_id)'
		);
	-- Clean up temporary tables	
	execute('drop table if exists '|| hits_temp_node_tab);
	execute('drop table if exists '|| hits_temp_stat_tab);
	execute('drop table if exists '|| hits_sparse_adj_matrix);
	execute('drop table if exists '|| hits_sparse_auth_matrix);
	execute('drop table if exists '|| hits_iter_tab);
	execute('drop table if exists '|| hits_current_tab);
	execute('drop table if exists '|| hub_score_tab);
	execute('drop table if exists '|| hub_score_tab_norm);
	execute('drop table if exists '|| auth_score_tab);
	execute('drop table if exists '|| auth_score_tab_norm);

   end;
$$ language plpgsql;






CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.hits()
RETURNS TEXT AS $$
SELECT '                                                                                                                                                                        
hits: Uses the HITS algorithm to calculate the Hub and Authority scores of a directed 
graph using the power iteration method.                                                                                                 
                                                                                                                                                                                
This function implements the HITS algorithm (https://en.wikipedia.org/wiki/HITS_algorithm).                                                                                       
It measures the relative importance of each node as a Hub and as an Authority in a directed 
graph based on how it is connected to other nodes.                                                                                                                                A high Hub score corresponds to being the source node for many links
A high Authority score corresponds to being the destination node for many links 
                                                                                                                                                                                
For full usage instructions, run "PDLTOOLS_SCHEMA.hits(''usage'')".                                                                                                         
'::TEXT;
$$ LANGUAGE SQL;



CREATE OR REPLACE FUNCTION PDLTOOLS_SCHEMA.hits(TEXT)
RETURNS TEXT AS $$

SELECT CASE WHEN $1!='usage' THEN PDLTOOLS_SCHEMA.hits() ELSE
'hits: Uses the HITS algorithm to calculate the Hub and Authority scores of a directed 
graph using the power iteration method.                                                                                                 
                                                                                                                                                                                
This function implements the HITS algorithm (https://en.wikipedia.org/wiki/HITS_algorithm).                                                                               
It measures the relative importance of each node as a Hub and as an Authority in a directed 
graph based on how it is connected to other nodes.                                                                                                                            
A high Hub score corresponds to being the source node for many links
A high Authority score corresponds to being the destination node for many links

Syntax
=====                                                                                                                                                                          
                                                                                                                                                                                
FUNCTION hits(input_tab TEXT, source_node TEXT, dest_node TEXT, graph_id TEXT, result_tab TEXT, max_iter INT, epsilon FLOAT)                                         
RETURNS VOID;                                                                

 * @param input_tab Input table that contains the edges of a directed graph.                                                                                                    
 * @param source_node Column that specifies source nodes.                                                                                                                       
 * @param dest_node Column that specifies destination nodes.
 * @param graph_id Column that specifies groups                                                                                                                   
 * @param result_tab Table to save HITS results (authority and hub scores).                 
 * @param max_iter Maximum number of iterations to run the algorithm.                                                                                                           
 * @param epsilon Convergence threshold. The function terminates if the L_1 difference of HITS values between two iterations falls below epsilon.                           
                                                                                                                                                                                
input_tab      - Input table that contains the edges of a directed graph.                                                                                                       
source_node    - Column that specifies source nodes.                                                                                                                            
dest_node      - Column that specifies destination nodes.                                                                                                                       
graph_id       - Column that specifies groups 
result_tab     - Table to save Authority and Hub scores. 
max_iter       - Maximum number of iterations to run the algorithm.                                                                                                             
epsilon        - Convergence threshold. The function terminates if the L_1 difference of                                                                                        
                 Authority scores between two iterations falls below epsilon.                                                                                                    
                                                                                                                                                                                
                                                                                                                                                                                
Usage                                                                                                                                                                           
=====                                                                                                                                                                           
                                                                                                                                                                                
A directed graph is expected to be provided in a table of the following structure:                                                                                              
                                                                                                                                                                                
TABLE/VIEW directed_graph                                                                                                                                                       
(                                                                                                                                                                               
    ...                                                                                                                                                                         
    source TEXT/INT/BIGINT,       -- Source node ID                                                                                                                             
    destination TEXT/INT/BIGINT,  -- Destination node ID
    groups  TEXT/INT/BIGING,      -- Group IDs                                                                                                                        
    ...                                                                                                                                                                         
)                                                                                                                                                                               
                                                                                                                                                                                
                                                                                                                                                                                
Example                                                                                                                                                                         
=======                                                                                                                                                                         
                                                                                                                                                                                
1. Create a test graph of 28 nodes.
   The graph in Group 1 was randomly generaged
   The graph in Group 2 has 5 nodes (A .. E) A is the only source and points to all other nodes
   The graph in Group 3 has 5 nodes (A .. E) A is the only destination nodes and all other nodes
   point to A                                                                                                                                            
                                                                                                                                                                                
CREATE TEMP TABLE hits_test_data (source TEXT, dest TEXT, groups TEXT) DISTRIBUTED RANDOMLY; 
INSERT INTO hits_test_data VALUES                                                                                                                                           
 (''02'', ''12'', ''1''), 
 (''03'', ''07'', ''1''), 
 (''01'', ''07'', ''1''), 
 (''01'', ''10'', ''1''), 
 (''02'', ''12'', ''1''), 
 (''05'', ''07'', ''1''), 
 (''08'', ''05'', ''1''), 
 (''05'', ''05'', ''1''), 
 (''06'', ''09'', ''1''), 
 (''04'', ''12'', ''1''), 
 (''02'', ''06'', ''1''), 
 (''05'', ''12'', ''1''), 
 (''07'', ''12'', ''1''), 
 (''02'', ''12'', ''1''), 
 (''02'', ''07'', ''1''), 
 (''01'', ''10'', ''1''), 
 (''02'', ''06'', ''1''), 
 (''02'', ''12'', ''1''), 
 (''00'', ''09'', ''1''), 
 (''00'', ''07'', ''1''), 
 (''A'', ''B'', ''2''),
 (''A'', ''C'', ''2''),
 (''A'', ''D'', ''2''),
 (''A'', ''E'', ''2''),
 (''B'', ''A'', ''3''),
 (''C'', ''A'', ''3''),
 (''D'', ''A'', ''3''),
 (''E'', ''A'', ''3'');

                                                                                                                                                                                
                                                                                                                                                                                
2. Use HITS to calculate the Authority and Hub scores for each node with maximum iteration number to 50, and tolerance threshold to 1e-3.                                     
                                                                                                                                                                                
SELECT pdltools.hits(''hits_test_data'', ''source'', ''dest'', ''groups'', ''hits_test_output'', 50, 1e-3);                                                               
                                                                                                                                                                                
SELECT * FROM hits_test_output ORDER BY graph_id, node;                                                                                                                           

node |			auth_score |		hub_score	| graph_id
-----+-----------------------------+----------------------------+---------
00   | 0	    		   |	0.12521980588474892303	|	1
01   | 0	    		   |	0.12219535557575501829	|	1
02   | 0	    		   |	0.21427999500813425759	|	1
03   | 0	   		   |	0.10577097101958970168	|	1
04   | 0	    		   |	0.07971544342450081202	|	1
05   | 0.11991351678760373024	   |	0.21957028262085088386	|	1
06   | 0.10130128095894597547	   |	0.01944883486515922136	|	1		
07   | 0.37212234958843970036	   |	0.07971544342450081202	|	1	
08   | 0			   |	0.03408386817676037016	|	1
09   | 0.06842469211557294832	   |	0			|	1
10   | 0.05778410193901261112	   |	0			|	1
12   | 0.28045405861042503450	   |	0			|	1
A    | 0			   |	1.00000000000000000000	|	2
B    | 0.25000000000000000000	   |	0			|	2
C    | 0.25000000000000000000	   |	0			|	2
D    | 0.25000000000000000000	   |	0			|	2
E    | 0.25000000000000000000	   |	0			|	2
A    | 1.00000000000000000000	   |	0			|	3
B    | 0			   |	0.25000000000000000000	|	3
C    | 0			   |	0.25000000000000000000	|	3
D    | 0			   |	0.25000000000000000000	|	3
E    | 0			   |	0.25000000000000000000	|	3


' END;

$$ LANGUAGE SQL;

